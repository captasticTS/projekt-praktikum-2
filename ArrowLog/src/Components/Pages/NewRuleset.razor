@page "/new-ruleset"
@using MudBlazor
@using Database.Services
@inject DbRulsetService RulesetService
@using Database.Models
@inject IHttpContextAccessor HttpContextAccessor
@inject DbPersonService PersonService

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-5">
    <!-- Section Title -->
    <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-3">New Ruleset</MudText>

    <MudForm>
        <MudGrid Spacing="3">
            <!-- Name Input -->
            <MudItem xs="12">
                <MudTextField Label="Name" @bind-Value="RulesetName" Variant=Variant.Outlined FullWidth />
            </MudItem>

            <!-- Attempts Selector -->
            <MudItem xs="12">
                <MudSelect T="int" Label="Attempts" Variant=Variant.Outlined FullWidth @bind-Value="Attempts">
                    @for (int i = 1; i <= 10; i++)
                    {
                        <MudSelectItem Value="@i">@i</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>

        <!-- Hitoptions Section -->
        <MudText Typo="Typo.h6" Align="Align.Start" Class="my-3">Hitoptions</MudText>
        <!-- Hitoptions Section -->
        <MudText Typo="Typo.h6" Align="Align.Start" Class="my-3">Hitoptions</MudText>
        <MudGrid>
            @foreach (var hitOption in HitOptions)
            {
                <MudItem xs="12">
                    <MudGrid Spacing="2" Align="Align.center">
                        <!-- Hitoption Name -->
                        <MudItem xs="3">
                            <MudTextField Label="Name" @bind-Value="hitOption.Name" Variant="Variant.Outlined" FullWidth />
                        </MudItem>

                        <!-- Dynamic Scores -->
                        @for (int i = 0; i < hitOption.Scores.Count; i++)
                        {
                            <MudItem xs="2">
                                @{
                                    string scoreLabel = $"Score {i + 1}";
                                }
                                <MudSelect T="int" Label="@scoreLabel" @bind-Value="hitOption.Scores[i]" Variant="Variant.Outlined" FullWidth>
                                    @for (int j = 1; j <= 10; j++)
                                    {
                                        <MudSelectItem Value="@j">@j</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                        }

                        <!-- Add Score Button -->
                        <MudItem xs="1">
                            <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Size="Size.Small" OnClick="() => AddScore(hitOption)" />
                        </MudItem>

                        <!-- Remove Score Button -->
                        <MudItem xs="1">
                            <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Error" Size="Size.Small" OnClick="() => RemoveScore(hitOption)" Disabled="@(!hitOption.Scores.Any())" />
                        </MudItem>

                        <!-- Remove HitOption Button -->
                        <MudItem xs="1">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="() => RemoveHitOption(hitOption)" />
                        </MudItem>
                    </MudGrid>
                </MudItem>
            }
        </MudGrid>

        <!-- Add Hitoption Button -->
        <MudGrid Spacing="3" Class="mt-3">
            <MudItem xs="12" Class="d-flex justify-center">
                <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Size="Size.Large" OnClick="AddHitOption" />
            </MudItem>
        </MudGrid>


        <!-- Add Hitoption Button -->
        <MudGrid Spacing="3" Class="mt-3">
            <MudItem xs="12" Class="d-flex justify-center">
                <MudIconButton Icon="@Icons.Material.Filled.Add" Color=Color.Primary Size=Size.Large OnClick="AddHitOption" />
            </MudItem>
        </MudGrid>

        <!-- Save Button -->
        <MudGrid Spacing="3" Class="mt-4">
            <MudItem xs="12" Class="d-flex justify-center">
                <MudButton Variant=Variant.Filled Color=Color.Primary OnClick="SaveRuleset">SAVE</MudButton>
            </MudItem>
        </MudGrid>
    </MudForm>
</MudContainer>

@code {
    private string RulesetName = string.Empty;
    private int Attempts = 3; // Default value
    private string LoggedInUser => HttpContextAccessor.HttpContext?.Session.GetString("LoggedInUser");


    private List<HitOption> HitOptions = new()
    {
        new HitOption { Name = "Spot", Scores = new List<int> { 9, 7, 5 } },
        new HitOption { Name = "Kill", Scores = new List<int> { 7, 5, 3 } },
        new HitOption { Name = "Body", Scores = new List<int> { 5, 3, 1 } }
    };

    private void AddHitOption()
    {
        HitOptions.Add(new HitOption { Name = $"Option {HitOptions.Count + 1}", Scores = new List<int> { 1 } });
    }

    private void RemoveHitOption(HitOption hitOption)
    {
        HitOptions.Remove(hitOption);
    }

    private void AddScore(HitOption hitOption)
    {
        hitOption.Scores.Add(1); // Add a default score of 1
    }

    private void RemoveScore(HitOption hitOption)
    {
        if (hitOption.Scores.Any())
        {
            hitOption.Scores.RemoveAt(hitOption.Scores.Count - 1); // Remove the last score
        }
    }

    public class HitOption
    {
        public string Name { get; set; }
        public List<int> Scores { get; set; } = new List<int>();
    }
    public class LocalRuleset
    {
        public string Name { get; set; }
        public List<LocalHitType> HitTypes { get; set; }
    }

    public class LocalHitType
    {
        public string Name { get; set; }
        public List<int> Scores { get; set; }
    }


    private async Task SaveRuleset()
    {

        var ruleset = new ArrowLog.Database.Models.Ruleset
            {
                Name = RulesetName,
                Author = PersonService.FindPersonsByName(LoggedInUser).Result[0],
                HitTypes = HitOptions.Select(hit => new ArrowLog.Database.Models.HitType
                {
                    Title = hit.Name,
                    Values = hit.Scores
                }).ToList()
            };

        var createdRuleset = await RulesetService.CreateRulset(ruleset);

        if (createdRuleset != null)
        {
            Console.WriteLine("Ruleset saved successfully!");
        }
        else
        {
            Console.WriteLine("Failed to save the ruleset. Ensure the name is unique and data is valid.");
        }
    }



}
