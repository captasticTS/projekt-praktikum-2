@page "/new-ruleset"
@using MudBlazor

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-5">
    <!-- Section Title -->
    <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-3">New Ruleset</MudText>

    <MudForm>
        <MudGrid Spacing="3">
            <!-- Name Input -->
            <MudItem xs="12">
                <MudTextField Label="Name" @bind-Value="RulesetName" Variant="Variant.Outlined" FullWidth />
            </MudItem>

            <!-- Attempts Selector -->
            <MudItem xs="12">
                <MudSelect T="int" Label="Attempts" Variant="Variant.Outlined" FullWidth @bind-Value="Attempts">
                    @foreach (var attempt in NumberRange)
                    {
                        <MudSelectItem Value="@attempt">@attempt</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>

        <!-- Hitoptions Section -->
        <MudText Typo="Typo.h6" Align="Align.Start" Class="my-3">Hitoptions</MudText>
        <MudGrid>
            @foreach (var hitOption in HitOptions)
            {
                <MudItem xs="12">
                    <MudGrid Spacing="2" AlignItems="Center">
                        <!-- Editable HitOption Name -->
                        <MudItem xs="3">
                            <MudTextField Label="Name" @bind-Value="hitOption.Name" Variant="Variant.Outlined" FullWidth />
                        </MudItem>

                        <!-- Dynamic Columns Based on Attempts -->
                        @foreach (var (score, index) in hitOption.Scores.Select((value, idx) => (value, idx)).Take(Attempts))
                        {
                            <MudItem xs="3">
                                <MudSelect T="int" @bind-Value="hitOption.Scores[index]" Variant="Variant.Outlined" FullWidth>
                                    @foreach (var number in NumberRange)
                                    {
                                        <MudSelectItem Value="@number">@number</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                        }



                        <!-- Remove HitOption Button -->
                        <MudItem xs="1">
                            <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Error" OnClick="() => RemoveHitOption(hitOption)" />
                        </MudItem>
                    </MudGrid>
                </MudItem>
            }
        </MudGrid>

        <!-- Add Hitoption Button -->
        <MudGrid Spacing="3" Class="mt-3">
            <MudItem xs="12" Class="d-flex justify-center">
                <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Size="Size.Large" OnClick="AddHitOption" />
            </MudItem>
        </MudGrid>

        <!-- Save Button -->
        <MudGrid Spacing="3" Class="mt-4">
            <MudItem xs="12" Class="d-flex justify-center">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveRuleset">SAVE</MudButton>
            </MudItem>
        </MudGrid>
    </MudForm>
</MudContainer>

@code {
    private string RulesetName = string.Empty;

    // Number range for selection (1-10)
    private List<int> NumberRange = Enumerable.Range(1, 20).ToList();

    // Attempts property to dynamically adjust scores
    private int _attempts = 3; // Default value
    private int Attempts
    {
        get => _attempts;
        set
        {
            _attempts = value;
            AdjustScores(); // Resize Scores lists to match Attempts
        }
    }


    // List of HitOptions
    private List<HitOption> HitOptions = new()
    {
        new HitOption { Name = "Spot", Scores = new List<int> { 20, 18, 16 } },
        new HitOption { Name = "Kill", Scores = new List<int> { 14, 12, 10 } },
        new HitOption { Name = "Body", Scores = new List<int> { 8, 6, 4 } }
    };

    // Adjust scores in HitOptions based on Attempts
    private void AdjustScores()
    {
        foreach (var hitOption in HitOptions)
        {
            // Ensure Scores has at least 'Attempts' number of elements
            while (hitOption.Scores.Count < Attempts)
            {
                hitOption.Scores.Add(0); // Add default value
            }

            // Remove extra elements if Scores has more than 'Attempts'
            while (hitOption.Scores.Count > Attempts)
            {
                hitOption.Scores.RemoveAt(hitOption.Scores.Count - 1);
            }
        }
    }

    // Add a new HitOption
    private void AddHitOption()
    {
        HitOptions.Add(new HitOption
            {
                Name = $"Option {HitOptions.Count + 1}",
                Scores = Enumerable.Repeat(0, Attempts).ToList() // Initialize Scores with default values
            });
    }

    // Remove an existing HitOption
    private void RemoveHitOption(HitOption hitOption)
    {
        HitOptions.Remove(hitOption);
    }

    // Save the ruleset
    private void SaveRuleset()
    {
        Console.WriteLine($"Ruleset Saved: {RulesetName} with {Attempts} attempts and {HitOptions.Count} hitoptions.");
    }

    // HitOption class
    public class HitOption
    {
        public string Name { get; set; }
        public List<int> Scores { get; set; } = new List<int>();
    }
}
