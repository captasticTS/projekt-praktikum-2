@page "/ActiveGame/{uniquegameid}"
@using ArrowLog.Features.GameLoop
@using ArrowLog.Database.Services
@using ArrowLog.Database.Models
@inject DbGameService gameService

<PageTitle>Active Game</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="pa-4" Style="padding: 16px;">
    <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">Active Game</MudText>

    @if (Cards.Any())
    {
        @foreach (var card in Cards)
        {
            if (Cards.IndexOf(card) <= CurrentCardIndex)
            {
                <MudCard Class="mb-4">
                    <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-2">Target</MudText>

                    <MudContainer Class="pa-4">
                        @foreach (var shot in card.ShotAttempts)
                        {
                            <MudRadioGroup T="int?" ValueChanged="@(val => HandleShotSelection(shot, val))">
                                @foreach (var option in shot.HitOptions.Select((value, index) => new { value, index }))
                                {
                                    <MudRadio T="int?" Value="@option.index">@option.value</MudRadio>
                                }
                            </MudRadioGroup>
                            <MudDivider Class="my-2" />
                        }
                    </MudContainer>
                </MudCard>
            }
        }
    }
    else
    {
        <MudText Typo="Typo.body1" Align="Align.Center">No active data to display.</MudText>
    }
</MudContainer>

@code {
    [Parameter]
    public string? uniquegameid { get; set; }

    private Game? Game { get; set; }

    private List<ShotsCard> Cards = new();
    private int CurrentCardIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        await InitializeGame();
    }

    private async Task InitializeGame()
    {
        Game = (await gameService.FindGameByCode(int.Parse(uniquegameid), true)).FirstOrDefault();

        // example card creation
        for (int i = 0; i < Game.Parcours.AnimalCount; i++)
        {
            var card = new ShotsCard(Game.Ruleset.HitTypes.Count(), Game.Ruleset.HitTypes.First().Values.Count());
            card.OnCardFinished += NextCard;
            Cards.Add(card);
        }
    }

    private void HandleShotSelection(ShotAttempt shot, int? value)
    {
        if (value is not null)
        {
            shot.SelectOption(value.Value);
            //StateHasChanged();
        }
    }

    private void NextCard()
    {
        if (CurrentCardIndex < Cards.Count - 1)
        {
            CurrentCardIndex++;
            //StateHasChanged();
        }
        else
        {
            Console.WriteLine("Game Over!");
        }
    }
}
