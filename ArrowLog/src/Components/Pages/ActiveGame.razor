@page "/ActiveGame/{uniquegameid}"
@inject IHttpContextAccessor HttpContextAccessor
@using ArrowLog.Features.GameLoop
@using ArrowLog.Database.Services
@using System.Text.Json
@using ArrowLog.Database.Models
@inject DbGameService gameService
@inject DbPersonService personService
@inject NavigationManager navigationManager

@if (IsUserLoggedIn)
{
    <PageTitle>Active Game</PageTitle>

    <MudContainer MaxWidth="MaxWidth.Small" Class="pa-4" Style="padding: 16px;">
        <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">Active Game</MudText>

        @if (Game is not null)
        {
            <div class="d-flex flex-column align-items-center mb-4">
                <MudText Class="text-center text-primary font-weight-bold">
                    Willkommen zum Spiel, <strong>@LoggedInUser</strong>
                </MudText>
                <MudText Class="text-center mt-3">
                    <strong>Parcours:</strong> @Game.Parcours.Name
                    <span class="mx-2">|</span>
                    <strong>Ruleset:</strong> @Game.Ruleset.Name
                    <span class="mx-2">|</span>
                    <strong>Code:</strong> @Game.Code
                    <span class="mx-2">|</span>
                    <strong>Von:</strong> @Game.Owner.NickName
                </MudText>
            </div>
        }
        else
        {
            <MudText>
                loading...
            </MudText>
        }

        @if (Cards.Any())
        {
            @foreach (var card in Cards)
            {
                if (Cards.IndexOf(card) <= CurrentCardIndex)
                {
                    <MudCard Class="mb-4" disabled=@(Cards.IndexOf(card) < CurrentCardIndex)>
                        <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-2">Target @(Cards.IndexOf(card)+1)</MudText>

                        <MudContainer Class="pa-4">
                            @foreach (var shot in card.ShotAttempts)
                            {
                                <MudRadioGroup T="int?" ValueChanged="@(val => HandleShotSelection(shot, val))">
                                    @foreach (var option in shot.HitOptions.Select((value, index) => new { value, index }))
                                    {
                                        <MudRadio Disabled=@(Cards.IndexOf(card) < CurrentCardIndex) T="int?" Value="@option.index">@option.value</MudRadio>
                                    }
                                </MudRadioGroup>
                                <MudDivider Class="my-2" />
                            }
                        </MudContainer>
                    </MudCard>
                }
            }
        }

        else
        {
            <MudText Typo="Typo.body1" Align="Align.Center">No active data to display.</MudText>
        }

        @if (Game is not null)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="mt-2 mb-4" OnClick="FinishGame">
                Spiel abschließen
            </MudButton>

            <div class="d-flex flex-column align-items-center mb-4">
                <MudText Class="text-center text-primary font-weight-bold">
                    Aktive Spieler:
                </MudText>
                <MudList T="Person" Class="text-center mt-3">
                    @foreach (var person in Game.activePlayers)
                    {
                        <MudListItem>
                            @person.NickName
                        </MudListItem>
                    }
                </MudList>
            </div>
        }
        else
        {
            <MudText>
                loading...
            </MudText>
        }

    </MudContainer>
}
else
{
    <p>Redirecting to login...</p>
}

@code {
    [Parameter]
    public string? uniquegameid { get; set; }

    private Score score { get; set; }

    private string LoggedInUser => HttpContextAccessor.HttpContext?.Session.GetString("LoggedInUser") ?? string.Empty;
    private bool IsUserLoggedIn => !string.IsNullOrEmpty(LoggedInUser);

    private Person? currentUser { get; set; } = new();

    private Game? Game { get; set; }

    private List<ShotsCard> Cards = new();
    private int CurrentCardIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        currentUser = (await personService.FindPersonsByName(LoggedInUser))?.FirstOrDefault();

        if (currentUser is null)
        {
            return;
        }

        await InitializeGame();
    }

    private async Task InitializeGame()
    {
        Game = (await gameService.FindGameByCode(int.Parse(uniquegameid), true)).FirstOrDefault();

        if (Game is null)
        {
            return;
        }

        if (!Game.activePlayers.Contains(currentUser))
        {
            Game.activePlayers.Add(currentUser);
            await gameService.UpdateGame(Game);
        }

        // example card creation
        for (int i = 0; i < Game.Parcours.AnimalCount; i++)
        {
            var card = new ShotsCard(Game.Ruleset.HitTypes.Count(), Game.Ruleset.HitTypes.First().Values.Count());
            card.OnCardFinished += NextCard;
            Cards.Add(card);
        }

        score = new Score();
        score.Ruleset = Game.Ruleset;
        score.Owner = currentUser;
    }

    private void HandleShotSelection(ShotAttempt shot, int? value)
    {
        if (value is not null)
        {
            // Log the shot details
            var cardIndex = Cards.IndexOf(Cards[CurrentCardIndex]);
            var optionText = shot.HitOptions[value.Value];
            Console.WriteLine($"Card: {cardIndex}, Attempt: {Cards[CurrentCardIndex].ShotAttempts.IndexOf(shot)}, Option: {value}");

            var newShot = new Shot();

            newShot.AttemptNumber = Cards[CurrentCardIndex].ShotAttempts.IndexOf(shot);

            newShot.ValueHit = Game.Ruleset.HitTypes[value ?? 0].Values[newShot.AttemptNumber];

            if (score.Results.Count < cardIndex + 1)
            {
                score.Results.Add(newShot);
            }
            else
            {
                score.Results[cardIndex] = newShot;
            }

            var options = new JsonSerializerOptions { WriteIndented = true };
            string jsonString = JsonSerializer.Serialize(score, options);

            Console.WriteLine(jsonString);

            // Select the shot option
            shot.SelectOption(value.Value);
        }
    }

    private async Task FinishGame()
    {
        Game = await gameService.FindGameById(Game.Id);
        //await gameService.AddScoreToGameId(Game.Id, score);
        Game.Scores.Add(score);
        Game.activePlayers.Remove(currentUser);
        await gameService.UpdateGame(Game);
        navigationManager.NavigateTo($"/GameResults/{Game.Id}");
    }

    private void NextCard()
    {
        if (CurrentCardIndex < Cards.Count - 1)
        {
            CurrentCardIndex++;
            //StateHasChanged();
        }
        else
        {
            Console.WriteLine("Game Over!");
        }
    }

    protected override void OnInitialized()
    {
        if (!IsUserLoggedIn)
        {
            navigationManager.NavigateTo("/");
        }
    }
}
