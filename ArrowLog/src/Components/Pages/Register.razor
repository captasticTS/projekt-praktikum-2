@page "/register"
@using MudBlazor
@inject NavigationManager NavigationManager
@using ArrowLog.Database.Services
@inject DbPersonService PersonService
@using Database.Models

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-5">
    <!-- Welcome Message -->
    <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-3">Create Your Account</MudText>

    <!-- Registration Form -->
    <MudForm @ref="form">
        <MudGrid Spacing="3">
            <!-- First Name<a href="c:\users\haemic\source\repos\projekt-praktikum-2\arrowlog\src\components\pages\register.razor">c:\users\haemic\source\repos\projekt-praktikum-2\arrowlog\src\components\pages\register.razor</a> -->
            <MudItem xs="12">
                <MudTextField Label="First Name" @bind-Value="FirstName" Variant=Variant.Outlined FullWidth />
            </MudItem>

            <!-- Last Name -->
            <MudItem xs="12">
                <MudTextField Label="Last Name" @bind-Value="LastName" Variant=Variant.Outlined FullWidth />
            </MudItem>

            <!-- Email -->
            <MudItem xs="12">
                <MudTextField Label="Email" @bind-Value="Email" Variant=Variant.Outlined FullWidth InputType.email />
            </MudItem>

            <!-- Nickname -->
            <MudItem xs="12">
                <MudTextField Label="Nickname" @bind-Value="Nickname" Variant=Variant.Outlined FullWidth />
            </MudItem>

            <!-- Password -->
            <MudItem xs="12">
                <MudTextField Label="Password" @bind-Value="Password" Variant=Variant.Outlined FullWidth InputType.password />
            </MudItem>
        </MudGrid>

        <!-- Failure Message -->
        @if (RegisterFailed)
        {
            <MudAlert Severity="Severity.Error" Class="mt-3">
                Registration failed. Please review Input.
            </MudAlert>
        }

        <!-- Register Button -->
        <MudGrid Spacing="3" Class="mt-4">
            <MudItem xs="12" Class="d-flex justify-center">
                <MudButton Variant=Variant.Filled Color=Color.Primary OnClick="RegisterUser">Register</MudButton>
            </MudItem>
        </MudGrid>
    </MudForm>

    <!-- Already Have Account Link -->
    <MudGrid Spacing="3" Class="mt-4">
        <MudItem xs="12" Class="d-flex justify-center">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Already have an account?
                <MudButton Variant=Variant.Outlined Color=Color.Secondary OnClick="GoToSignIn">Sign In</MudButton>
            </MudText>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private string FirstName = string.Empty;
    private string LastName = string.Empty;
    private string Email = string.Empty;
    private string Nickname = string.Empty;
    private string Password = string.Empty;

    private MudForm form;
    private bool RegisterFailed;

    private async Task RegisterUser()
    {
        if (!form.IsValid)
        {
            RegisterFailed = true;
            return;
        }

        // Create a new Person object
        var newPerson = new Person
            {
                FirstName = FirstName,
                LastName = LastName,
                Email = Email,
                NickName = Nickname,
                PasswordHash = HashPassword(Password)
            };

        // Call the service to register the user
        var createdPerson = await PersonService.CreatePerson(newPerson);

        if (createdPerson != null)
        {
            Console.WriteLine("User registered successfully!");
            NavigationManager.NavigateTo("/");
        }
        else
        {
            RegisterFailed = true;
        }
    }

    private void GoToSignIn()
    {
        NavigationManager.NavigateTo("/");
    }

    private string HashPassword(string password)
    {
        // Simple hashing example (use a secure method in production, like BCrypt)
        using var sha256 = System.Security.Cryptography.SHA256.Create();
        var bytes = System.Text.Encoding.UTF8.GetBytes(password);
        var hash = sha256.ComputeHash(bytes);
        return Convert.ToBase64String(hash);
    }
}