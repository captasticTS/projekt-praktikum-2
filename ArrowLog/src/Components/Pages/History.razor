@page "/history"
@inject IHttpContextAccessor HttpContextAccessor
@using MudBlazor
@using ArrowLog.Database.Services
@using ArrowLog.Database.Models
@inject NavigationManager NavigationManager
@inject DbGameService gameService
@inject DbPersonService personService

@if (IsUserLoggedIn)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-5">
        <MudGrid Spacing="3" AlignItems="Center">
            <MudItem xs="10">
                <MudText Typo="Typo.h5" Align="Align.Start">Past Games</MudText>
            </MudItem>
            <MudItem xs="2" Class="d-flex justify-center">
                <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Primary" OnClick="RefreshGames" />
            </MudItem>
        </MudGrid>

        <MudTable Items="GameHistory" Dense="true" Bordered="true" Hover="true" Loading="@isLoading">
            <HeaderContent>
                <MudTh>Date</MudTh>
                <MudTh>Parcour</MudTh>
                <MudTh>Score</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
                <MudTd DataLabel="Parcour">@context.Parcour</MudTd>
                <MudTd DataLabel="Score">@context.Score</MudTd>
            </RowTemplate>
        </MudTable>

        <MudGrid Spacing="3" Class="mt-4">
            <MudItem xs="12">
                <MudText Typo="Typo.body1">Avg Score:</MudText>
                <MudTextField @bind-Value="AverageScore" Variant="Variant.Outlined" FullWidth Disabled />
            </MudItem>
        </MudGrid>
    </MudContainer>

    <MudContainer>
        <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350" ChartOptions="options"></MudChart>
    </MudContainer>
}
else
{
    <p>Redirecting to login...</p>
}

@code {
    private string LoggedInUser => HttpContextAccessor.HttpContext?.Session.GetString("LoggedInUser") ?? string.Empty;
    private bool IsUserLoggedIn => !string.IsNullOrEmpty(LoggedInUser);
    private ChartOptions options = new ChartOptions();
    public List<ChartSeries> Series = new List<ChartSeries>();
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
    private bool isLoading = true;

    private List<GameHistoryItem> GameHistory = new();
    private double AverageScore;
    private Person? currentUser;

    protected override async Task OnInitializedAsync()
    {
        if (!IsUserLoggedIn)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        currentUser = (await personService.FindPersonsByName(LoggedInUser))?.FirstOrDefault();
        if (currentUser != null)
        {
            await LoadGameHistory();
        }
    }

    private async Task LoadGameHistory()
    {
        isLoading = true;
        GameHistory.Clear();
        Series.Clear();

        try
        {
            if (currentUser != null)
            {
                var activeGames = await gameService.FindGameByActivity(false);
                if (activeGames != null)
                {
                    // Filter games where the current user was a participant and transform to GameHistoryItem
                    GameHistory = activeGames
                        .Where(g => g.activePlayers.Any(p => p.Id == currentUser.Id) || g.Owner.Id == currentUser.Id)
                        .Select(game => new GameHistoryItem
                            {
                                //Todo: Score does not load properly
                                Date = game.Date,
                                Parcour = game.Parcours.Name,
                                Score = game.Scores
                                    .Where(s => s.Owner.Id == currentUser.Id)
                                    .Select(s => s.getTotalScore())
                                    .FirstOrDefault()
                            })
                        .OrderByDescending(g => g.Date)
                        .ToList();

                    CalculateAverageScore();
                    UpdateChartData();

                }
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CalculateAverageScore()
    {
        if (GameHistory.Any())
        {
            AverageScore = GameHistory.Average(g => g.Score);
        }
    }

    private void UpdateChartData()
    {
        // Initialize a dictionary to hold the scores aggregates for each month
        var monthlyScores = new Dictionary<int, List<double>>();
        foreach (var game in GameHistory)
        {
            int monthIndex = game.Date.Month - 1;
            if (!monthlyScores.ContainsKey(monthIndex))
            {
                monthlyScores[monthIndex] = new List<double>();
            }
            monthlyScores[monthIndex].Add(game.Score);
        }

        // Initialize an array to hold the scores for each month, carry forward the last known score
        double[] scores = new double[12];
        double lastScore = 0;
        for (int i = 0; i < 12; i++)
        {
            if (monthlyScores.ContainsKey(i))
            {
                scores[i] = monthlyScores[i].Average();
                lastScore = scores[i];
            }
            else
            {
                scores[i] = lastScore;
            }
        }

        Series.Add(new ChartSeries
            {
                Name = "Scores",
                Data = scores
            });

        options.InterpolationOption = InterpolationOption.NaturalSpline;
    }

    private async Task RefreshGames()
    {
        await LoadGameHistory();
    }

    private class GameHistoryItem
    {
        public DateTime Date { get; set; }
        public string Parcour { get; set; } = string.Empty;
        public int Score { get; set; }
    }
}