@page "/new-game"
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@using Database.Models
@using Database.Services
@inject DbGameService gameService
@inject DbParcoursService parcoursService

<PageTitle>NewGame</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="pa-4" Style="padding: 16px;">

    <!-- Enter Code Section -->
    <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">Join Game</MudText>
    <MudTextField T="string" Label="Enter Code" Variant="Variant.Outlined" FullWidth="true" />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="mt-2">
        Join!
    </MudButton>

    @(createdSuccessfully ? "created success" : "created failed")

    <!-- Divider -->
    <MudDivider />
    <MudDivider />

    <MudGrid Spacing="2" Class="mt-2">
        <MudItem xs="5" Class="d-flex align-center">
            <MudDivider Class="my-2" />
        </MudItem>
        <MudItem xs="2" Class="d-flex justify-center align-center">
            <MudText Typo="Typo.caption">or</MudText>
        </MudItem>
        <MudItem xs="5" Class="d-flex align-center">
            <MudDivider Class="my-2" />
        </MudItem>
    </MudGrid>

    <!-- Create Game Section -->
    <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">Create Game</MudText>
    <MudAutocomplete @bind-Value="_selectedCourse"
                     SearchFunc="SearchCourses"
                     Variant="Variant.Outlined"
                     Margin="Margin.None"
                     Dense="false"
                     Disabled="false"
                     ReadOnly="false"
                     Placeholder="Select a course"
                     HelperTextOnFocus="false"
                     Clearable="true" />
    <MudSelect @bind-Value="_selectRules" T="string" Label="Ruleset" Variant="Variant.Outlined" FullWidth="true" Class="mb-3">
        @foreach (var rules in _rules)
        {
            <MudSelectItem Value="rules">@rules</MudSelectItem>
        }
    </MudSelect>
    <MudTextField T="string" Label="Code" Variant="Variant.Outlined" FullWidth="true" Disabled="true" />

    <MudButton Variant="Variant.Filled" Color="Color.Secondary" FullWidth="true" Class="mt-2">
        Start!
    </MudButton>

</MudContainer>


@code {
    private Parcours _selectedCourse;
    private List<string> _courses = new();
    private bool createdSuccessfully;

    private string LoggedInUser => HttpContextAccessor.HttpContext.Session.GetString("LoggedInUser");
    private bool IsUserLoggedIn => !string.IsNullOrEmpty(LoggedInUser);

    private string _selectRules;
    private string[] _rules = { "Rule1", "Rule2", "Rule3", "Rule4" };

    // TODO
    private async void CreateGame()
    {
        Game? game = new();
        
        //game.

        var newGame = await gameService.CreateGame(game);

        if (newGame is not null)
        {
            createdSuccessfully = true;
        }
    }

    private async Task<IEnumerable<Parcours>?> SearchCourses(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return new List<Parcours>();
        }

        return await parcoursService.FindParcoursByName(value) ?? new List<Parcours>();
    }
}