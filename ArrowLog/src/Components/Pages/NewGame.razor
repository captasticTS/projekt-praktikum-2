@page "/newgame"
@using ArrowLog.Database
@using ArrowLog.Database.Seeders
@using Microsoft.AspNetCore.Http
@using Database.Models
@using Database.Services
@using Microsoft.EntityFrameworkCore
@inject IHttpContextAccessor HttpContextAccessor
@inject ISnackbar Snackbar
@inject DbGameService GameService
@inject NavigationManager NavigationManager
@inject AppDbContext DbContext
@inject DbParcoursService parcoursService

@if (IsUserLoggedIn)
{
<PageTitle>NewGame</PageTitle>
<MudContainer MaxWidth="MaxWidth.Small" Class="pa-4" Style="padding: 16px;">
    <!-- Enter Code Section -->
    <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">Join Game</MudText>
    <MudTextField @bind-Value="_joinCode" T="string" Label="Enter Code" Variant="Variant.Outlined" FullWidth="true" />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="mt-2" OnClick="JoinGame">
        Join!
    </MudButton>
    <!-- Divider -->
    <MudDivider />
    <MudDivider />
    <MudGrid Spacing="2" Class="mt-2">
        <MudItem xs="5" Class="d-flex align-center">
            <MudDivider Class="my-2" />
        </MudItem>
        <MudItem xs="2" Class="d-flex justify-center align-center">
            <MudText Typo="Typo.caption">or</MudText>
        </MudItem>
        <MudItem xs="5" Class="d-flex align-center">
            <MudDivider Class="my-2" />
        </MudItem>
    </MudGrid>
    <!-- Create Game Section -->
    <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">Create Game</MudText>
    <MudAutocomplete @bind-Value="_selectedParcours"
                     SearchFunc="SearchCourses"
                     Variant="Variant.Outlined"
                     Margin="Margin.None"
                     Dense="false"
                     Disabled="false"
                     ReadOnly="false"
                     Placeholder="Select a course"
                     HelperTextOnFocus="false"
                     Clearable="true" />
    <MudSelect T="Ruleset" Label="Ruleset" @bind-Value="_selectedRuleset" Variant="Variant.Outlined" FullWidth="true" Class="mb-3">
        @foreach (var ruleset in _rulesetList)
        {
            <MudSelectItem Value="ruleset">@ruleset.Name</MudSelectItem>
        }
    </MudSelect>
    <MudTextField T="string" Label="Code" Value="@_generatedCode" Variant="Variant.Outlined" FullWidth="true" Disabled="true" />
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" FullWidth="true" Class="mt-2" OnClick="CreateGame" Disabled="@(!CanCreateGame)">
        Start!
    </MudButton>
</MudContainer>
}
else
{
    <p>Redirecting to login...</p>
}

@code {
    private Parcours _selectedCourse;
    private string LoggedInUser => HttpContextAccessor.HttpContext?.Session.GetString("LoggedInUser") ?? string.Empty;
    private bool IsUserLoggedIn => !string.IsNullOrEmpty(LoggedInUser);

    private Person currentUser;

    private string _joinCode = string.Empty;
    private string _generatedCode = string.Empty;
    private List<Parcours> _parcoursList = new();
    private List<Ruleset> _rulesetList = new();
    private Parcours? _selectedParcours;
    private Ruleset? _selectedRuleset;
    private Random _random = new Random();

    private bool CanCreateGame => IsUserLoggedIn && _selectedParcours != null && _selectedRuleset != null;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await GenerateUniqueCode();
    }

    private async Task LoadData()
    {
        _parcoursList = await DbContext.Parcours.ToListAsync();
        _rulesetList = await DbContext.Rulesets.ToListAsync();

        // If no data exists, seed the database
        if (!_parcoursList.Any() || !_rulesetList.Any())
        {
            await DbSeeder.SeedData(DbContext);
            _parcoursList = await DbContext.Parcours.ToListAsync();
            _rulesetList = await DbContext.Rulesets.ToListAsync();
        }
    }

    private async Task GenerateUniqueCode()
    {
        bool isUnique = false;
        while (!isUnique)
        {
            int code = _random.Next(100000, 1000000); // Generates 6-digit number
            var existingGames = await GameService.FindGameByCode(code, true);
            if (existingGames == null || !existingGames.Any())
            {
                _generatedCode = code.ToString();
                isUnique = true;
            }
        }
    }

    private async Task CreateGame()
    {
        if (!CanCreateGame)
        {
            Snackbar.Add("Please select a course and ruleset first.", Severity.Warning);
            return;
        }

        var owner = await DbContext.Persons.FirstOrDefaultAsync(p => p.NickName == LoggedInUser);
        if (owner == null)
        {
            Snackbar.Add("User not found.", Severity.Error);
            return;
        }

        var game = new Game
            {
                Date = DateTime.Now,
                Code = int.Parse(_generatedCode),
                Owner = owner,
                Parcours = _selectedParcours,
                Ruleset = _selectedRuleset!,
                activePlayers = new List<Person>() { owner }
            };

        var result = await GameService.CreateGame(game);
        if (result != null)
        {
            Snackbar.Add("Game created successfully!", Severity.Success);
            NavigationManager.NavigateTo($"/ActiveGame/{_generatedCode}");
        }
        else
        {
            Snackbar.Add("Failed to create game.", Severity.Error);
            await GenerateUniqueCode(); // Generate new code in case of failure
        }
    }

    private async Task JoinGame()
    {
        if (string.IsNullOrWhiteSpace(_joinCode))
        {
            Snackbar.Add("Please enter a game code.", Severity.Warning);
            return;
        }

        if (int.TryParse(_joinCode, out int code))
        {
            var games = await GameService.FindGameByCode(code, true);
            if (games != null && games.Any())
            {
                NavigationManager.NavigateTo($"/ActiveGame/{code}");
            }
            else
            {
                Snackbar.Add("Game not found or inactive.", Severity.Warning);
            }
        }
        else
        {
            Snackbar.Add("Invalid game code format.", Severity.Error);
        }
    }

    private async Task<IEnumerable<Parcours>?> SearchCourses(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return new List<Parcours>();
        }

        return await parcoursService.FindParcoursByName(value) ?? new List<Parcours>();
    }

    protected override void OnInitialized()
    {
        if (!IsUserLoggedIn)
        {
            NavigationManager.NavigateTo("/");
        }
    }
}


           